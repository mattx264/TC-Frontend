!function(e){var t={};function n(o){if(t[o])return t[o].exports;var a=t[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(o,a,function(t){return e[t]}.bind(null,a));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function(){function e(e,t){var n=this;this.addKeyDownEventListener=function(e){var t=document.activeElement,o=n.xpathHelper.getInputElementXPath(t);13==e.keyCode&&(e.preventDefault(),n.sendMessage({action:"sendKeys",path:o,value:"Keys.ENTER"}),setTimeout((function(){document.querySelector("form").submit()}),100))},this.addKeyUpEventListener=function(e){var t=document.activeElement,o=n.xpathHelper.getInputElementXPath(t);if("tab"!=e.code.toLowerCase()&&"shiftleft"!=e.code.toLowerCase()&&"shiftright"!=e.code.toLowerCase()&&"backspace"!=e.code.toLowerCase()&&"controlright"!=e.code.toLowerCase()&&"controlleft"!=e.code.toLowerCase()&&"altright"!=e.code.toLowerCase()&&"altleft"!=e.code.toLowerCase()){if(13!=e.keyCode)if("Backspace"===e.code)n.sendMessage({action:"sendKeys",path:o,value:"Keys.BACKSPACE"});else if(t instanceof HTMLInputElement){"/HTML"===(o=n.xpathHelper.getActionElementXPath(t))&&(o=n.xpathHelper.getElementXPath(t));var a={action:"sendKeys",path:o,value:e.key};n.sendMessage(a)}}else n.sendMessage({action:"sendKeys",path:o,value:"Keys."+e.code.toUpperCase()})},this.addClickEventListener=function(e){n.checkAndMonitorSelectElement(e.target);var t=n.xpathHelper.getActionElementXPath(e.target);if("/HTML"===t&&(t=n.xpathHelper.getElementXPath(e.target)),null!==t){var o={action:"click",path:t,value:null};n.sendMessage(o)}},this.addDoubleClickEventListener=function(e){console.log("double click!!!"),console.log(e)},this.addMouseListener=function(e){3!==e.which&&n.addClickEventListener(e),n.rightClickElementClicked=e.target,n.rightClickElementClicked.classList.add("tc-selected-element")},this.onChangeSelect=function(e){var t=n.xpathHelper.getElementXPath(e.target,document);n.sendMessage({value:e.target.value,action:"selectByValue",path:t})},this.xpathHelper=e,this.sendMessage=t,null==document.ondblclick&&(document.onkeyup=this.addKeyUpEventListener,document.onkeydown=this.addKeyDownEventListener,document.ondblclick=this.addDoubleClickEventListener,document.onmousedown=this.addMouseListener)}return e.prototype.checkAndMonitorSelectElement=function(e){"SELECT"===e.nodeName&&e.addEventListener("change",this.onChangeSelect)},e}(),a=function(){function e(){}return e.prototype.getXPath=function(e){if(e.hasAttribute("id"))return"//"+e.tagName+'[@id="'+e.id+'"]';if(e.hasAttribute("class"))return"//"+e.tagName+'[@class="'+e.getAttribute("class")+'"]';var t="/"+e.tagName;return this.getXPath(e.parentNode)+t},e.prototype.getElementXPath=function(e,t){void 0===t&&(t=void 0),null==t&&(t=document);for(var n,o,a="";e!==t.documentElement;){for(n=0,o=e;o;)1===o.nodeType&&o.nodeName===e.nodeName&&(n+=1),o=o.previousSibling;a=e.nodeName+"["+n+"]/"+a,e=e.parentNode}return a=(a="/"+t.documentElement.nodeName+"/"+a).replace(/\/$/,"")},e.prototype.getElementXPathByType=function(e,t,n){void 0===t&&(t=void 0),void 0===n&&(n="INPUT");e.cloneNode(!0);null==t&&(t=document);for(var o,a,i="",r=!0;e!==t.documentElement;){for(o=0,a=e;a;)1===a.nodeType&&a.nodeName===e.nodeName&&(o+=1),a=a.previousSibling;if(!0===r&&e&&e.nodeName==n?(i=e.nodeName+"["+o+"]/"+i,r=!1):!1===r&&(i=e.nodeName+"["+o+"]/"+i),!e)break;e=e.parentNode}return i=(i="/"+t.documentElement.nodeName+"/"+i).replace(/\/$/,"")},e.prototype.getInputElementXPath=function(e,t){return void 0===t&&(t=void 0),this.getElementXPathByType(e,t,"INPUT")},e.prototype.getActionElementXPath=function(e,t){void 0===t&&(t=void 0);e.cloneNode(!0);null==t&&(t=document);for(var n,o,a="",i=!0;e!==t.documentElement;){for(n=0,o=e;o;)1===o.nodeType&&o.nodeName===e.nodeName&&(n+=1),o=o.previousSibling;if(!0!==i||!e||"A"!=e.nodeName&&"BUTTON"!=e.nodeName&&"SELECT"!=e.nodeName?!1===i&&(a=e.nodeName+"["+n+"]/"+a):(a=e.nodeName+"["+n+"]/"+a,i=!1),!e)break;e=e.parentNode}return a=(a="/"+t.documentElement.nodeName+"/"+a).replace(/\/$/,"")},e.prototype.getElementByXPath=function(e,t){if(t||(t=document),t.evaluate)return t.evaluate(e,document,null,9,null).singleNodeValue;for(;"/"==e.charAt(0);)e=e.substr(1);for(var n=t,o=e.split("/"),a=0;a<o.length;a++){var i=o[a].split(/(\w*)\[(\d*)\]/gi).filter((function(e){return!(""==e||e.match(/\s/gi))}),this),r=i[0],s=i[1]?i[1]-1:0;if(!(a<o.length-1))return n.getElementsByTagName(r)[s];n=n.getElementsByTagName(r)[s]}},e.prototype.getElementByXPathCount=function(e,t){t||(t=document),document.evaluate("count("+e+")",t,null,XPathResult.ANY_TYPE,null)},e}(),i=function(){function e(){}return e.prototype.startMonitor=function(e){chrome.extension.connect({name:"Sample Communication"}).onMessage.addListener((function(t){"xhrStart"===t.type?e({action:t.type,value:[t.data.url,t.data.method],xhrObject:t,path:null}):"xhrDone"===t.type&&e({action:t.type,value:[t.data.url,t.data.method,t.data.statusCode],xhrObject:t,path:null})}))},e}();new(function(){function e(){this.actionLog=[],this.isInit={startBrowserActionMonitor:!1,startXHRMonitor:!1},"true"===localStorage.getItem("isStart")&&this.sendMessageToPopup({type:"getInfo",data:{action:"isStarted"}},(function(e){!0!==e&&localStorage.setItem("isStart","false")})),0==chrome.runtime.onMessage.hasListener(this.onMessage.bind(this))&&chrome.runtime.onMessage.addListener(this.onMessage.bind(this)),this.sendMessageToPopup({type:"hello"})}return e.prototype.onMessage=function(e,t,n){switch(e.method){case"getUrl":this.sendMessage({action:"goToUrl",value:location.href,path:null}),n(location.href);break;case"startBrowserActionMonitor":localStorage.setItem("isStart","true"),this.startBrowserActionMonitor();break;case"startXHRMonitor":this.startXHRMonitor();break;default:throw new Error("Message method not support - add new case "+e.method)}n({successful:!0})},e.prototype.sendMessage=function(e){if(chrome.runtime){if(this.actionLog.length>0){var t=this.actionLog[this.actionLog.length-1];if(t.path===e.path&&"sendKeys"===t.action&&null!==e.value&&-1===e.value.indexOf("Keys."))return void this.sendUpdateMessage(e)}this.actionLog.push(e),this.sendMessageToPopup({type:"insert",data:e})}},e.prototype.sendUpdateMessage=function(e){this.sendMessageToPopup({type:"appendLastValue",data:e})},e.prototype.sendMessageToPopup=function(e,t){chrome.runtime&&chrome.runtime.sendMessage(e,(function(e){console.log(e),t&&t(e)}))},e.prototype.startXHRMonitor=function(){!0!==this.isInit.startXHRMonitor&&(this.isInit.startXHRMonitor=!0,localStorage.setItem("isInit",JSON.stringify(this.isInit)),(new i).startMonitor(this.sendMessage.bind(this)))},e.prototype.startBrowserActionMonitor=function(){!0!==this.isInit.startBrowserActionMonitor&&(this.isInit.startBrowserActionMonitor=!0,localStorage.setItem("isInit",JSON.stringify(this.isInit)),this.xpathHelper=new a,new o(this.xpathHelper,this.sendMessage.bind(this)))},e}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,